/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.seox.struts;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.jtrend.struts.core.JtrendAction;
import com.seox.db.User;
import com.seox.db.UserDAO;
import com.seox.struts.form.RegisterForm;
import com.seox.work.UserBO;
import com.seox.work.UserBOPool;

/** 
 * MyEclipse Struts
 * Creation date: 09-09-2006
 * 
 * XDoclet definition:
 * @struts.action path="/register_form" name="registerform" input="/jsp/pages/contents/register_form.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/jsp/layout/layout.jsp" contextRelative="true"
 */
public class RegsiterFormAction extends JtrendAction {
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward ex(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        
        RegisterForm registerform = (RegisterForm) form;
        HttpSession session = request.getSession();
        
        if ( !isMissing(registerform.getEmail()) &&
             !isMissing(registerform.getEmail_confirm()) &&
             !isMissing(registerform.getLastname()) &&
             !isMissing(registerform.getPassword()) &&
             !isMissing(registerform.getFirstname()) )   {

            String email = registerform.getEmail().trim();
            String emailConfimr = registerform.getEmail_confirm().trim();
            String lastname = registerform.getLastname().trim();
            String firstname = registerform.getFirstname().trim();
            String password = registerform.getPassword().trim();
            
            UserDAO dao = new UserDAO();
            
            List list =dao.findByEmail(email);

            if (list.size() > 0 ) {
                m_logger.debug("User " + email + " already exists");
                setPage(session, "register_form");
                return mapping.findForward("success");
            }
            
            User user = new User();
            
            user.setEmail(email);
            user.setFirstname(firstname);
            user.setLastname(lastname);
            user.setPassword(password);
            user.setUsername(email);
            user.setRegisteredT(new Date());
            user.setGoogleKey(null);
            user.setActivatedT(null);
            try {
                dao.save(user);
                getSessionContext(session).setLogin(true);
                getSessionContext(session).setUsername(email);
                
                UserBO userBO = UserBOPool.getInstance().getUserBO(user.getUsername());
                session.setAttribute("k_userbo", userBO);
                processLogin(session, userBO);
            }
            catch (RuntimeException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            
        }
        else {
            setPage(session, "register_form");
            return mapping.findForward("success");
        }
        
        setPage(session, "home");
        return mapping.findForward("success");
    }

    private static Logger m_logger = Logger.getLogger(RegsiterFormAction.class);
}
