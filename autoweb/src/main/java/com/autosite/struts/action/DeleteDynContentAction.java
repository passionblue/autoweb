/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.autosite.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.autosite.db.Content;
import com.autosite.db.Page;
import com.autosite.ds.ContentDS;
import com.autosite.ds.PageDS;
import com.autosite.struts.action.core.AutositeCoreAction;

/** 
 * MyEclipse Struts
 * Creation date: 03-24-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="default" path="/jsp/layout/layout.jsp" contextRelative="true"
 */
public class DeleteDynContentAction extends AutositeCoreAction {
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward ex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession();

        String paramContentId = request.getParameter("id");
        
        if (isMissing(paramContentId)) {
            m_logger.info("Content ID is missing");
            return mapping.findForward("default");
        }
        
        long contentId = Long.parseLong(paramContentId);
        //Need to verify content is really belong to this site and page. 
        
        Content content = ContentDS.getInstance().getById(contentId);
        
        if ( content == null) {
            sessionErrorText(session, "Invalid request");
            return mapping.findForward("default");
        }
        
        // If deleted from home, return to HOME not dynpage This should be done before deleted
        Page page = PageDS.getInstance().getById(content.getPageId());
        if ( page != null && page.getPageName().equals("XHOME") ) {
            setPage(session, request.getServerName(), "home");
        } else {
            setPage(session, request.getServerName(), getStringUnderlyingPage(request));
        }        
        
        
        if (content != null) {
            sessionTopText(session, "Content deleted (" + content.getContentSubject() + ")");
            ContentDS.getInstance().delete(content);
        } else {
            sessionErrorText(session, "Content was not found");
            m_logger.info("Content not found by param ID=" + paramContentId);
        }

        
        return mapping.findForward("default");
    }
    protected boolean loginRequired() {
        return true;
    }

    private static Logger m_logger = Logger.getLogger(DeleteDynContentAction.class);
}
