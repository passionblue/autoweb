/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.autosite.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.autosite.app.AutositeLoginExtentExecutor;
import com.autosite.db.AutositeLoginExtent;
import com.autosite.db.AutositeUser;
import com.autosite.db.Site;
import com.autosite.ds.AutositeLoginExtentDS;
import com.autosite.ds.SiteDS;
import com.autosite.struts.action.core.AutositeCoreAction;
import com.autosite.util.UserUtil;
import com.surveygen.struts.form.LoginForm;

/**
 * MyEclipse Struts Creation date: 07-14-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/loginFormSubmit" name="loginForm"
 *                input="/jsp/form/login.jsp" scope="request" validate="true"
 * @struts.action-forward name="default" path="/jsp/layout/layout.jsp"
 */
public class AutositeLoginAction extends AutositeCoreAction {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward ex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {

        LoginForm loginForm = (LoginForm) form;// TODO Auto-generated method
                                               // stub
        HttpSession session = request.getSession();

        Site site = SiteDS.getInstance().registerSite(request.getServerName());
        if (site == null) {
            sessionErrorText(session, "Internal error occurred. Please try once again");
            return mapping.findForward("default");
        }

        String username = null;
        String password = null;

        if (!isMissing(loginForm.getUsername())) {
            username = loginForm.getUsername();
        }
        if (!isMissing(loginForm.getPassword())) {
            password = loginForm.getPassword();
        }

        boolean dev = false;

        if (dev) {
            getSessionContext(session).setLogin(true);
            getSessionContext(session).setUsername("siteadmin");
            m_logger.info("user " + username + " logged in");
            setPage(session, request.getServerName(), "home");
            return mapping.findForward("default");
        }

        m_logger.info("Login request usename=" + username + ",password=" + password);

        if (username != null) {

            AutositeUser authenticatedUser = null;
            if (m_properties.getProperty("app.cfg.authentication").equalsIgnoreCase("database")) {
                authenticatedUser = dbAuthenticate(site, username, password);
            }
            else {
                //authenticated = staticAuthenticate(username, password);
            }

            if (authenticatedUser != null) {
                try {
                    setLogin(session, authenticatedUser);
                    executeExtent(request, authenticatedUser);
                }
                catch (Exception e) {
                    session.setAttribute("k_top_error_text", "username and password are correct. But login failed. Please try again");
                    request.setAttribute("k_top_error_text", "username and password are correct. But login failed. Please try again");
                    setPage(session, request.getServerName(), "login_form");
                    m_logger.error(e.getMessage(),e);
                }
                setPage(session, request.getServerName(), "home");
                return mapping.findForward("default");
            }
        } else {
            m_logger.info("Login has failed");
        }

        sessionErrorText(session, "username and password are not correct");
        setPage(session, request.getServerName(), "login_form");
        return mapping.findForward("default");
    }

    protected boolean staticAuthenticate(String username, String password) {

        if (username != null && username.trim().equals("autosite") && password != null && password.trim().equals("autosite"))
            return true;
        return false;
    }



    protected boolean executeExtent (HttpServletRequest request, AutositeUser user) throws Exception{
        
        
        Site site = SiteDS.getInstance().registerSite(request.getServerName());
        
        AutositeLoginExtent extent = AutositeLoginExtentDS.getInstance().getObjectBySiteId(site.getId());
        
        if (extent != null){
            
            try {
                AutositeLoginExtentExecutor executor = (AutositeLoginExtentExecutor)Class.forName(extent.getClassName()).newInstance();
                executor.execute(request, user);
            }
            catch (Exception e) {
                m_logger.error(e.getMessage(),e);
            }
        }
        
        return true;
    }
    
    
    
    
    protected boolean loginRequired() {
        return false;
    }

    private static Logger m_logger = Logger.getLogger(AutositeLoginAction.class);
}
