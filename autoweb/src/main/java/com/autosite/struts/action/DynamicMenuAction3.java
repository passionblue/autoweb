/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.autosite.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.autosite.db.AutositeUser;
import com.autosite.db.Content;
import com.autosite.db.Page;
import com.autosite.db.Poll;
import com.autosite.db.Site;
import com.autosite.ds.ContentDS;
import com.autosite.ds.PageDS;
import com.autosite.ds.PollDS;
import com.autosite.ds.SiteDS;
import com.autosite.session.AutositeSessionContext;
import com.autosite.struts.action.core.AutositeCoreAction;
import com.jtrend.util.WebParamUtil;

/** 
 * MyEclipse Struts
 * Creation date: 03-21-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="default" path="/jsp/layout/layout.jsp" contextRelative="true"
 */
public class DynamicMenuAction3 extends AutositeCoreAction {
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward ex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession();
        
        Site site = SiteDS.getInstance().registerSite(request.getServerName());
        String url = request.getRequestURI();
        m_logger.debug(url);
        
        String parts[] = url.split("/");

        m_logger.debug("num parts=" + parts.length);
        
        if ( parts.length < 1 ) {
            m_logger.info("length of parts is too short. returning as error");
            sessionErrorText(session, "Invalid request");
            return mapping.findForward("default");
        }

        //====================================================================================================
        // Check if this images
        //====================================================================================================
        if ( parts[1].equals("mimgs") || parts[1].equals("simgs") || parts[1].equals("pimgs")  ){

            String fullPath ="/image/";
            
            if (parts[1].equals("simgs")){
                fullPath="/s" + site.getId() + "/img";
            } else if (parts[1].equals("pimgs")){
                fullPath="/pub_img";
            } else {
                AutositeSessionContext ctx = (AutositeSessionContext)getSessionContext(session);
                AutositeUser user = ctx.getUserObject();
                fullPath="/s" + site.getId() + "/u" + user.getId() + "/img";
            }
            
            fullPath = fullPath +"/" + parts[2];
            m_logger.info("Full path = " + fullPath);    
            
            return mapping.findForward("default");
        }
        
        //====================================================================================================
        // Check if it is /poll
        //====================================================================================================
        
        if ( parts[1].equals("poll")){
            String serial = parts[2];
            int suffixPos = parts[2].indexOf(".html");
            if (suffixPos >= 0){
                serial = parts[2].substring(0, suffixPos);
            }
            
            if ( PollDS.getInstance().getObjectBySerial(serial) != null ){
                m_logger.info("Poll is found with " + serial);
                
                Poll poll = PollDS.getInstance().getObjectBySerial(serial);
                if (poll != null)
                    session.setAttribute("k_pollId", ""+poll.getId());
                
                setPage(session, "poll_public_home");
                return mapping.findForward("default");
            }
        }

        //====================================================================================================
        // Check if it is /content or /article
        //====================================================================================================
        
        if ( parts[1].equals("content") ||parts[1].equals("article") ){
            String part2 = parts[2];
            int part2Pos = parts[2].indexOf(".html");
            if (part2Pos >= 0){
                part2 = parts[2].substring(0, part2Pos);
            }
            
            String shortcutPart = part2; 
            Content content = ContentDS.getInstance().getBySiteIdToShortcutUrl(site.getId(), shortcutPart);

            if ( content == null) {
                content = ContentDS.getInstance().getById(WebParamUtil.getLongValue(part2));
            }
            
            if (content != null){
                session.setAttribute("k_page_content", content);

                long pageId = content.getPageId();
                Page dynPage = PageDS.getInstance().getById(pageId);
                if ( dynPage != null) {
                    session.setAttribute("k_page_name", dynPage.getPageName());
                    session.setAttribute("k_page_obj", dynPage);
                } else {
                    session.removeAttribute("k_page_name");
                    session.removeAttribute("k_page_obj");
                }

                setPage(session, "dyn_content_single");
                return mapping.findForward("default");
            } else {
                setPage(session, "error_content_not_found");
                sessionErrorText(session, "Invalid request");
                return mapping.findForward("default");
            }
            
        }
        
        //====================================================================================================
        // Check it is dynamic page and content
        //====================================================================================================
        String dynPageName = parts[1];
        Page dynPage = PageDS.getInstance().getBySiteIdPageName(site.getId(), dynPageName);
        
        m_logger.debug("DynPage = " + dynPageName);
        // Direct access to article
        if (dynPage != null) {

            String shortcutPart = parts[2]; 
            int suffixPos = parts[2].indexOf(".html");
            if (suffixPos >= 0){
                shortcutPart = parts[2].substring(0, suffixPos);
            }
            
            Content content = ContentDS.getInstance().getBySiteIdToShortcutUrl(site.getId(), shortcutPart); 
            
            // In case shortcut not there in db, auto-gen shortcuts is contentid
            if (content == null) {
                m_logger.debug("Content not found by shortcut " + shortcutPart + ". so trying to find by conv to id");
                long contId = WebParamUtil.getLongValue(parts[2]);
                content = ContentDS.getInstance().getById(contId);
                
                if ( content != null) {
                    if (content.getPageId() != dynPage.getId() ) {
                        m_logger.debug("Content  found but pageId for it not match with page in url " + dynPage.getId());
                        content = null;
                    }
                }
            }

            if (content != null){
                session.setAttribute("k_page_name", dynPageName);
                session.setAttribute("k_page_obj", dynPage);
                session.setAttribute("k_page_content", content);

                setPage(session, "dyn_content_single");
                return mapping.findForward("default");
            } else {
                sessionErrorText(session, "Invalid request");
                return mapping.findForward("default");
            }
        } else {
            m_logger.info("Dyn Page not found for " + parts[0]);
        }
        
        
        //====================================================================================================
        //====================================================================================================
        setPage(session, "error_not_found");
        return mapping.findForward("default");
    }
    
    protected boolean loginRequired() {
        return false;
    }
    
    private static Logger m_logger = Logger.getLogger(DynamicMenuAction3.class);
}
