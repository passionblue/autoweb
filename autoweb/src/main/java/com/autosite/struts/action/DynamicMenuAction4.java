/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.autosite.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.autosite.db.AutositeUser;
import com.autosite.db.Content;
import com.autosite.db.Page;
import com.autosite.db.Poll;
import com.autosite.db.Site;
import com.autosite.ds.ContentDS;
import com.autosite.ds.PageDS;
import com.autosite.ds.PollDS;
import com.autosite.ds.SiteDS;
import com.autosite.session.AutositeSessionContext;
import com.autosite.struts.action.core.AutositeCoreAction;
import com.jtrend.util.WebParamUtil;

/** 
 * MyEclipse Struts
 * Creation date: 03-21-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="default" path="/jsp/layout/layout.jsp" contextRelative="true"
 */
public class DynamicMenuAction4 extends AutositeCoreAction {
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward ex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession();
        
        Site site = SiteDS.getInstance().registerSite(request.getServerName());
        String url = request.getRequestURI();
        m_logger.debug(url);
        
        String parts[] = url.split("/");

        m_logger.debug("num parts=" + parts.length);
        
        if ( parts.length < 1 ) {
            m_logger.info("length of parts is too short. returning as error");
            sessionErrorText(session, "Invalid request");
            return mapping.findForward("default");
        }

        m_logger.debug("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        
        setPage(session, "error_not_found");
        return mapping.findForward("default");
    }
    
    protected boolean loginRequired() {
        return false;
    }
    
    private static Logger m_logger = Logger.getLogger(DynamicMenuAction4.class);
}
