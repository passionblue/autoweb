/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.autosite.struts.action;

import java.sql.Timestamp;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.autosite.db.MenuItem;
import com.autosite.db.Page;
import com.autosite.db.Panel;
import com.autosite.db.Site;
import com.autosite.ds.MenuItemDS;
import com.autosite.ds.PageDS;
import com.autosite.ds.PanelDS;
import com.autosite.ds.SiteDS;
import com.autosite.struts.action.core.AutositeCoreAction;
import com.autosite.struts.form.AddPageForm;
import com.autosite.util.DynMenuManager;
import com.autosite.util.PanelMenuOrderUtil;
import com.jtrend.util.WebParamUtil;

/**
 * MyEclipse Struts Creation date: 03-21-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/addPage" name="addPageForm"
 *                input="/jsp/form/addPage.jsp" scope="request" validate="true"
 * @struts.action-forward name="default" path="/jsp/layout/layout.jsp"
 *                        contextRelative="true"
 */
public class AddPageAction extends AutositeCoreAction {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward ex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        AddPageForm pageForm = (AddPageForm) form;// TODO Auto-generated
                                                        // method stub
        HttpSession session = request.getSession();
        
        if ( isMissing(pageForm.getPage() ) ) {
            sessionErrorText(session, "Required field is missing");
            return mapping.findForward("default"); 
        }

        m_logger.debug("Page to add=" + pageForm.getPage());
        
        String pageUrl = pageForm.getPage().trim().replace(" ", "_");
        pageUrl = pageForm.getPage().trim().replace("'", "_");
        pageUrl = pageForm.getPage().trim().replace("\"", "_");
        

        // Get Site Object
        Site site = SiteDS.getInstance().registerSite(request.getServerName());

        int numSearch = 1;
        String validPageUrl = pageUrl;
        while(true) {
            
            Page dynPage = PageDS.getInstance().getBySiteIdPageName(site.getId(), validPageUrl);
            if (dynPage == null)
                break;
            numSearch++;
            validPageUrl = pageUrl + "__" + numSearch;
        }
        
        pageUrl = validPageUrl;
        
        if (isMissing(pageForm.getPageDisplay())) {
            pageForm.setPageDisplay(pageUrl);
        }

        Page parentPage = null;
        if ( !isMissing(pageForm.getParentPageId())){
            long parentId = WebParamUtil.getLongValue(pageForm.getParentPageId());
            
            if (parentId > 0){
                parentPage = PageDS.getInstance().getById(parentId);
                if ( parentPage == null) {
                    sessionErrorText(session, "Internal Error occurred. Parent menu not found");
                    return mapping.findForward("default"); 
                } else {
                    m_logger.debug("Parent page exists. page=" + PageDS.objectToString(parentPage));
                }
            }
        }
        
        
        Page page = new Page();
        
        page.setPageName(pageUrl);
        page.setPageMenuTitle(pageForm.getPageDisplay());
        page.setHeaderPage(WebParamUtil.getIntValue(pageForm.getHeaderPage()));
        
        if (parentPage == null)
            page.setMenuPanelId(WebParamUtil.getLongValue(pageForm.getMenuPanelId()));
        else 
            page.setMenuPanelId(parentPage.getMenuPanelId());
        
        page.setParentId(WebParamUtil.getLongValue(pageForm.getParentPageId()));

        page.setCreatedTime(new Timestamp(System.currentTimeMillis()));
        page.setSiteUrl(SiteDS.getCommonUrl(request.getServerName()));
        page.setSiteId(site.getId());
        page.setUnderlyingPage(pageForm.getUnderlyingPage());
        
        if ( PageDS.getInstance().put(page) ) {
            if (!m_menuManager.insertPage(page)){
                PageDS.getInstance().delete(page);
                sessionErrorText(session, "Internal Error occurred.");
                return mapping.findForward("default"); 
            }
            
            
            //Add MenuItem and Update Order
            
            Panel panel = PanelDS.getInstance().getById(WebParamUtil.getLongValue(pageForm.getMenuPanelId()));
            if (panel != null) {
            
                MenuItem menuItem = new MenuItem();
                
                menuItem.setSiteId(site.getId());
                menuItem.setPageId(page.getId());
                menuItem.setPanelId(WebParamUtil.getLongValue(pageForm.getMenuPanelId()));
                menuItem.setParentId(WebParamUtil.getLongValue(pageForm.getParentPageId()));
                menuItem.setTimeCreated(new Timestamp(System.currentTimeMillis()));
                
                menuItem.setTitle(pageForm.getPageDisplay());
                
                if (MenuItemDS.getInstance().put(menuItem)){
                    PanelMenuOrderUtil.addMenuItem(panel, menuItem);
                }
            } else {
                m_logger.error("Panel not found for passed " + pageForm.getMenuPanelId() + " menuitem creation failed");
            }
        }
        
        // Update session data
        List pages = PageDS.getInstance().getBySiteId(site.getId());
        session.setAttribute("k_dyn_pages", pages);
        
        setPage(session, request.getServerName(), "home");
        return mapping.findForward("default");
    }
    
    protected boolean loginRequired() {
        return true;
    }

    protected PageDS m_ds = PageDS.getInstance();
    protected DynMenuManager m_menuManager = DynMenuManager.getInstance();
    
    
    private static Logger m_logger = Logger.getLogger(AddPageAction.class);
}
