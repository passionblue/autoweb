/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.autosite.struts.act;

import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.autosite.db.Site;
import com.autosite.ds.SiteDS;
import com.autosite.struts.action.core.AutositeCoreAction;
import com.autosite.util.DefaultActionMapper;
import com.autosite.util.DefaultFilePropertiesLoader;

/** 
 * Created to play as an proxy to enable to route to regular action but can't access all the methods in actions in request scope. 
 * so now obsolete 2013 02 17
 * 
 * 
 */

@Deprecated
public class AutositeActionRouter extends AutositeCoreAction {

    protected DefaultActionMapper m_actionMapper;

    public AutositeActionRouter(){
        m_actionMapper = DefaultActionMapper.getInstance();
    }
    
    public ActionForward ex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession();
        
        Site site = SiteDS.getInstance().registerSite(request.getServerName());
        String url = request.getRequestURI();
        m_logger.debug(url);
        
        String parts[] = url.split("/");

        m_logger.debug("num parts=" + parts.length);
        
        if ( parts.length < 1 ) {
            m_logger.info("length of parts is too short. returning as error");
            sessionErrorText(session, "Invalid request");
            return mapping.findForward("default");
        }
        
        m_logger.debug("XXXXXXXXXXXXXXXXXXXXXXXXXXX " + parts[1]);
        m_logger.debug("XXXXXXXXXXXXXXXXXXXXXXXXXXX " + parts[2]);

        if ( !parts[1].equalsIgnoreCase("a")){
            m_logger.info("Action route not correct ");
            setPage(session, "error_action_not_found");
            return mapping.findForward("default");
        }
        
        String actionRoute = parts[2].substring(0, parts[2].length()-5);

        m_logger.debug("XXXXXXXXXXXXXXXXXXXXXXXXXXX " + actionRoute);
        
        if ( m_actionMapper.getCoreAction(actionRoute) == null){

            String actionClass = null;

            if (actionRoute.endsWith("AjaxAction")){
                actionClass = "com.autosite.struts.action." + StringUtils.capitalize(actionRoute);
            } else if  (actionRoute.endsWith("Action")){
                actionClass = "com.autosite.struts.action." + StringUtils.capitalize(actionRoute.replaceAll("Action", "AjaxAction"));
            }
            
            m_logger.info("Action class to run " +actionClass);
            
            try {
                AutositeCoreAction action = (AutositeCoreAction)Class.forName(actionClass).newInstance();
                m_actionMapper.register(actionRoute, action);
                m_logger.info("New Action registered " + actionRoute + " class " + actionClass);
            }
            catch (Exception e) {
                m_logger.error(e.getMessage(), e);
                setPage(session, "error_action_not_found");
                return mapping.findForward("default");
            }
        } 
        
        return m_actionMapper.getCoreAction(actionRoute).ex(mapping, form, request, response);
    }
    
    protected boolean loginRequired() {
        return false;
    }
    
    private static Logger m_logger = Logger.getLogger(AutositeActionRouter.class);
}
