/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.autosite.struts.act;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.autosite.app.AutositeLoginExtentExecutor;
import com.autosite.db.AutositeLoginExtent;
import com.autosite.db.AutositeUser;
import com.autosite.db.Site;
import com.autosite.ds.AutositeLoginExtentDS;
import com.autosite.ds.SiteDS;
import com.autosite.struts.action.core.AutositeCoreAction;
import com.autosite.util.UserUtil;
import com.jtrend.session.PageView;
import com.jtrend.struts.core.DefaultPageForwardManager;
import com.jtrend.struts.core.DefaultViewManager;

/**
 * forward page button.
 * 
 *  
 * 
 * 
 * 
 */
public class ForwardToAction extends AutositeCoreAction {
    /*
     * Generated Methods
     */

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward ex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {

        HttpSession session = request.getSession();

        Site site = SiteDS.getInstance().registerSite(request.getServerName());
        if (site == null) {
            sessionErrorText(session, "Internal error occurred. Please try once again");
            return mapping.findForward("default");
        }
        
        String sentPage = getSentPage(request);
        String cmd = request.getParameter("cmd");
        
        
        DefaultPageForwardManager pageManager = DefaultPageForwardManager.getInstance(getSite(request).getSiteUrl());
        
        m_logger.debug("Page sent from " + sentPage + " cmd=" + cmd);
        
        if ( cmd != null){
            String forwardToPage = pageManager.getPageForwardToByCommand(sentPage, cmd, "success", sentPage);
            m_logger.debug("ForwardTo page=" + forwardToPage);
            setPage(request, forwardToPage,  pageManager.isInternalForward(sentPage, cmd, "success"), false);
        } else {
            if ( sentPage != null ) { 
                m_logger.debug("FowardTo page(Back to sending page)=" + sentPage +  " cmd=NONE");
                setPage(request, sentPage,  pageManager.isInternalForward(getActionName(), cmd, "success"), false);
            } else {
                setPage(request, "error",  pageManager.isInternalForward(getActionName(), cmd, "success"), false);
                m_logger.debug("cmd and sentPage not found so foward back to ");
            }
        }
        
        return mapping.findForward("default");
    }

    protected boolean staticAuthenticate(String username, String password) {

        if (username != null && username.trim().equals("autosite") && password != null && password.trim().equals("autosite"))
            return true;
        
        
        
        return false;
    }

    protected AutositeUser dbAuthenticate(Site site, String username, String password) {
        AutositeUser user = UserUtil.findUser(site, username);

        if ( user == null ) {
            m_logger.info("User object not found for " + username);
            return null;
        }
        
        if (password != null && password.equals(user.getPassword())) {
            return user;
        }
        else {
            return null;
        }
    }

    protected boolean executeExtent (HttpServletRequest request, AutositeUser user) throws Exception{
        
        
        Site site = SiteDS.getInstance().registerSite(request.getServerName());
        
        AutositeLoginExtent extent = AutositeLoginExtentDS.getInstance().getObjectBySiteId(site.getId());
        
        if (extent != null){
            
            try {
                AutositeLoginExtentExecutor executor = (AutositeLoginExtentExecutor)Class.forName(extent.getClassName()).newInstance();
                executor.execute(request, user);
            }
            catch (Exception e) {
                m_logger.error(e.getMessage(),e);
            }
        }
        
        return true;
    }
    
    
    
    
    protected boolean loginRequired() {
        return false;
    }

    private static Logger m_logger = Logger.getLogger(ForwardToAction.class);
}
