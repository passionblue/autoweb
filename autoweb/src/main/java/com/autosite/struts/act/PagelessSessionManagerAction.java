/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.autosite.struts.act;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.json.JSONObject;

import com.autosite.Constants;
import com.autosite.concur2.AutositeEventHandlerManager;
import com.autosite.db.AutositeRemoteDevice;
import com.autosite.db.AutositeUser;
import com.autosite.db.Site;
import com.autosite.ds.AutositeRemoteDeviceDS;
import com.autosite.session.AutositeSessionContext;
import com.autosite.session.AutositeSessionContextUtil;
import com.autosite.session.devicesynch.AutositeLedgerSynchTrackingManager;
import com.autosite.struts.action.core.AutositeCoreAction;
import com.jtrend.session.SessionContext;
import com.jtrend.util.TimeNow;
import com.jtrend.util.WebUtil;

/** 
 * MyEclipse Struts
 * Creation date: 06-17-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="default" path="/jsp/layout/layout.jsp" contextRelative="true"
 */
public class PagelessSessionManagerAction extends AutositeCoreAction {
    /*
     * Generated Methods
     */

    /**
     * the request would be like
     * 
     * http://www.uxsx.com:8080/pagelessSession.html?login=passionbluedirect@gmail.com&password=joshua&ajxr=getctxid&cmd=pagelesslogin
     * 
     * the response would be like 
     * 
     * {"ctxid":"cdac5e2a-0447-4abb-a24b-4d63ed5afe45:29-uxsx.com:20130211133657687","code":"0"}
     * 
     * then with that ctxid, the next request could be like without using the same session
     * 
     * http://www.uxsx.com:8080/userManageAction.html?ajxr=getlistjson&_ctxId=c51fc7d0-189e-44a7-9de6-4b3c41fda961:29-uxsx.com:20130211140423586
     * 
     */
    public Map exAjax(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
        HttpSession session = request.getSession();
        
        Map ret = new HashMap();
        JSONObject top = new JSONObject();

        try {
            Map working = new HashMap();
            ex(mapping, form, request, response, true, working);
        }
        catch (Exception e) {
            m_logger.error(e.getMessage(),e);

            top.put("errormsg", e.getMessage());
            top.put("code", "-1");
            
            response.setStatus(500);
            ret.put("__value", top.toString());
            return ret;
        }
        //
        if ( hasRequestValue(request, "ajxr", "getctxid")  || hasRequestValue(request, "ajxr", "getctxidjson") ||hasRequestValue(request, "ajxr", "getctxidxml")  ){

            SessionContext sessionContext = getSessionContext(session);
            m_logger.debug(" Processing getctxid " + sessionContext.getSerial());

            Site site = findSessionBoundSite(request);
            AutositeRemoteDevice registeredDevice = AutositeRemoteDeviceDS.getInstance().getBySiteIdToDeviceId(site.getId(), sessionContext.getSourceDeviceId());
            
            if ( registeredDevice != null){
                String deviceSeq = StringUtils.leftPad(""+registeredDevice.getId(), 2, '0');
                top.put("deviceSeq", deviceSeq);
            }
            
            top.put("ctxid", sessionContext.getSerial());
            top.put("code", "0");
        }

        ret.put("__value", top.toString());
        
        return ret;
    }    
    
    public ActionForward ex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response, boolean throwException, Map returnObjects) throws Exception {
        HttpSession session = request.getSession();
        
        Site site = findSessionBoundSite(request);
        //Command
        
        if ( hasRequestValue(request, "cmd", "pagelesslogin")   || hasRequestValue(request, "cmd", "login")   ){

            String username = null;
            String password = null;
            String deviceId = null;
            String title = null;

            username = request.getParameter("login");
            password = request.getParameter("password");
            title = request.getParameter("title");

            AutositeUser authenticatedUser = dbAuthenticate(site, username, password);
            
            if (authenticatedUser != null) {
                if ( WebUtil.isTrue(authenticatedUser.getPagelessSession())){
                    try {
                        deviceId = request.getParameter("deviceId");
                        
                        AutositeSessionContext sessionContext = (AutositeSessionContext)getSessionContext(session);
                        m_logger.info("PageSession Login with device ID " + deviceId);

                        if (WebUtil.isNotNull(deviceId)){
                            sessionContext.setSourceDeviceId(deviceId);
                            
                            AutositeRemoteDevice registeredDevice = AutositeRemoteDeviceDS.getInstance().getBySiteIdToDeviceId(site.getId(), deviceId);
                            
                            if ( registeredDevice == null){
                                registeredDevice = new AutositeRemoteDevice();
                                registeredDevice.setDeviceId(deviceId);
                                registeredDevice.setDeviceType(1); //TODO 1 is iPAD but have to automatically figure out or sent by device.
                                registeredDevice.setSiteId(site.getId());
                                registeredDevice.setTimeCreated(new TimeNow());
                                AutositeRemoteDeviceDS.getInstance().put(registeredDevice);
                                AutositeEventHandlerManager.getInstance().dropEvent("RemoteDevice", "Registration", "New Device Created [" + deviceId + "]");
                            }

                            AutositeLedgerSynchTrackingManager.getInstance().registerDevice(registeredDevice);
                            AutositeEventHandlerManager.getInstance().dropEvent("RemoteDevice", "Registration", "Device Registered [" + deviceId + "]"); 
                            
                            sessionContext.setRemoteDevice(registeredDevice);
                        } else {
                            //TODO what to do. allowed but notification should not be bothered. 
                            throw new Exception("Device id missing");
                        }
                        
                        //registers the device to synch tracker
                        
                        setLogin(session, authenticatedUser, true);
                        
                        // This should be only place that sets PAGESLESS session type. Useing setSeletedType() so that it not gets overriden by useragent.  
                        sessionContext.setSelectedSessionType(SessionContext.SESSION_TYPE_MOBILE_PAGELESS);
                        
                        //Pageless session will get persisted. 
                        AutositeSessionContextUtil.persistSessionContext(site, sessionContext);
                    }
                    catch (Exception e) {
                        m_logger.error(e.getMessage(),e);
                        throw e;
                    }
                } else {
                    // How to handle for the non-pageless session request??
                    Exception ex = new Exception("User " + authenticatedUser.getId() + " user " + authenticatedUser.getUsername() + " not configured Device Loggable");
                    m_logger.error(ex);
                    throw ex;
                }
            } else {
                throw new SecurityException("Login failed with " + username);
            }
        } else if ( hasRequestValue(request, "cmd", "pagelessunregisterdevice")   || hasRequestValue(request, "cmd", "unregisterdevice")   ){

            String username = null;
            String password = null;
            String deviceId = null;
            
            username = request.getParameter("login");
            password = request.getParameter("password");
            deviceId = request.getParameter("deviceId");
            
            AutositeUser authenticatedUser = dbAuthenticate(site, username, password);

            AutositeRemoteDevice registeredDevice = (deviceId == null? null: AutositeRemoteDeviceDS.getInstance().getBySiteIdToDeviceId(site.getId(), deviceId));
            
            if (authenticatedUser != null && registeredDevice != null) {
                if ( WebUtil.isTrue(authenticatedUser.getPagelessSession())){
                    try {

                        registeredDevice.setUnregistered(Constants.TRUE);

                        AutositeSessionContext sessionContext = (AutositeSessionContext)getSessionContext(session);
                        AutositeLedgerSynchTrackingManager.getInstance().unregisterDevice(registeredDevice);
                        m_logger.info("PageSession Unregistering with device ID " + deviceId);

                    }
                    catch (Exception e) {
                        m_logger.error(e.getMessage(),e);
                    }
                } else {
                    // How to handle for the non-pageless session request??
                }
            } else {
                throw new SecurityException("Login failed with " + username);
            }
        }

        return mapping.findForward("default");
    }
    
    protected boolean isPagelessAction(){
        return true;
    }    

    protected boolean loginRequired() {
        return false;
    }
    
    private static Logger m_logger = Logger.getLogger(PagelessSessionManagerAction.class);
}
